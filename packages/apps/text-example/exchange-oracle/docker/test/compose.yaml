version: "3.8"

services:
  # EXCHANGE ORACLE
  test:
    build:
      context: ../../
      dockerfile: docker/test/Dockerfile
    network_mode: "host"
    environment:
      S3_ENDPOINT_URL: '127.0.0.1:9000'
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      minio:
        condition: service_started
      postgres_exchange_oracle:
        condition: service_started
      backend:
        condition: service_started
    tty: true
  postgres_exchange_oracle:
    image: postgres:14.4
    restart: on-failure
    environment:
      POSTGRES_PASSWORD: '${PG_USER}'
      POSTGRES_USER: '${PG_PASSWORD}'
      POSTGRES_DB: '${PG_DB}'
      PGDATA: '/var/lib/postgresql/data/pgdata'
    volumes:
      - postgres:/var/lib/postgresql/data/pgdata
    ports:
      - ${PG_PORT}:${PG_PORT}
    command: ["postgres", "-c", "log_statement=all", "-p", "${PG_PORT}"]
  minio:
    image: quay.io/minio/minio
    network_mode: "host"
    container_name: minio_server
    restart: on-failure
    volumes:
      - ~/minio:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command: minio server --console-address ":9090" /data
  backend:
    image: doccano/doccano:backend
    container_name: doccano_backend
    volumes:
      - static_volume:/backend/staticfiles
      - media:/backend/media
      - tmp_file:/backend/filepond-temp-uploads
    environment:
      ADMIN_USERNAME: "${DOCCANO_ADMIN}"
      ADMIN_PASSWORD: "${DOCCANO_ADMIN_PASS}"
      ADMIN_EMAIL: ${DOCCANO_ADMIN_EMAIL}
      CELERY_BROKER_URL: "amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq"
      DATABASE_URL: "postgres://${PG_USER}:${PG_PASSWORD}@postgres:${PG_PORT_DOCCANO}/${PG_DB_DOCCANO}?sslmode=disable"
      ALLOW_SIGNUP: "False"
      DEBUG: "False"
      DJANGO_SETTINGS_MODULE: "config.settings.production"
    ports:
      - 4358:8000
    depends_on:
      - postgres
      - celery
    networks:
      - network-backend
      - network-frontend
  celery:
    image: doccano/doccano:backend
    volumes:
      - media:/backend/media
      - tmp_file:/backend/filepond-temp-uploads
    entrypoint: ["/opt/bin/prod-celery.sh"]
    environment:
      PYTHONUNBUFFERED: "1"
      CELERY_BROKER_URL: "amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq"
      DATABASE_URL: "postgres://${PG_USER}:${PG_PASSWORD}@postgres:${PG_PORT_DOCCANO}/${PG_DB_DOCCANO}?sslmode=disable"
      DJANGO_SETTINGS_MODULE: "config.settings.production"
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - network-backend
  flower:
    image: doccano/doccano:backend
    entrypoint: ["/opt/bin/prod-flower.sh"]
    environment:
      PYTHONUNBUFFERED: "1"
      CELERY_BROKER_URL: "amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq"
      DATABASE_URL: "postgres://${PG_USER}:${PG_PASSWORD}@postgres:${PG_PORT_DOCCANO}/${PG_DB_DOCCANO}?sslmode=disable"
      DJANGO_SETTINGS_MODULE: "config.settings.production"
      FLOWER_BASIC_AUTH: "${FLOWER_BASIC_AUTH}" # Format "username:password"
    depends_on:
      - celery
    ports:
      - 5555:5555
    networks:
      - network-backend
      - network-frontend
  rabbitmq:
    image: rabbitmq:3.10.7-alpine
    environment:
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_DEFAULT_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_DEFAULT_PASS}"
    ports:
      - 5672:5672
    networks:
      - network-backend
  nginx:
    image: doccano/doccano:frontend
    command: >
      /bin/sh -c
      "envsubst '
      $${WORKER_PROCESSES}
      '< /etc/nginx/nginx.conf.template
      > /etc/nginx/nginx.conf
      && nginx -g 'daemon off;'"
    environment:
      API_URL: "http://backend:8000"
      GOOGLE_TRACKING_ID: ""
      WORKER_PROCESSES: "auto"
    volumes:
      - static_volume:/static
      - media:/media
    ports:
      - 80:8080
    depends_on:
      - backend
    networks:
      - network-frontend
  postgres:
    image: postgres:13.3-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: "${PG_USER}"
      POSTGRES_PASSWORD: "${PG_PASSWORD}"
      POSTGRES_DB: "${PG_DB_DOCCANO}"
    networks:
      - network-backend
    command: ["-p", "${PG_PORT_DOCCANO}"]


volumes:
  postgres_data:
  static_volume:
  media:
  tmp_file:
  postgres:
  minio_data:
    driver: local

networks:
  network-backend:
  network-frontend: